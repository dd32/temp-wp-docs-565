https://developer.wordpress.org/apis/handbook/site-health/

<!-- wp:paragraph -->
<p>Since WordPress 5.8, developers are allowed to extend Site Health screen. This API allows developers to add their own tabs to the Site Health interface.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://make.wordpress.org/core/files/2021/06/4-menu-items.png" alt="" /></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Registering a custom tab navigation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Developers need to start by creating a navigation element, so that users may access the new tab. This is done using the&nbsp;<code>site_health_navigation_tabs</code>&nbsp;filter, which is an associated array of tab keys, and their label.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">&lt;?php
function wporg_example_site_health_navigation_tabs( $tabs ) {
    // translators: Tab heading for Site Health navigation.
    $tabs['example-site-health-tab'] = esc_html_x( 'My New Tab', 'Site Health', 'text-domain' );
 
    return $tabs;
}
add_filter( 'site_health_navigation_tabs', 'wporg_example_site_health_navigation_tabs' );</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The above example will add the identifier&nbsp;<code>example-site-health-tab</code>&nbsp;with the label&nbsp;<code>My New Tab</code>&nbsp;to the header navigation located in Site Health screens.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is also possible to re-order what tabs are displayed first using this filter, or even remove tabs. By default core has two tabs, the&nbsp;<code>Status</code>&nbsp;and&nbsp;<code>Info</code>&nbsp;screens. The&nbsp;<code>Status</code>&nbsp;screen is the default, and therefore has no slug.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To not overburden the navigation area, if there are more than 4 items added, only the first three will be displayed directly, with the remaining items being wrapped inside a sub-navigation. This is based on usage testing in the Health Check&nbsp;plugin, where 4 items have shown to be enough to cover most use cases, but not so many as to become confusing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Displaying the content of a custom tab</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When a user visits a Site Health tab, other than the default screen, the&nbsp;<code>site_health_tab_content</code>&nbsp;action triggers. This action includes a single argument being the slug, as defined by the tab navigation in the previous filter, to help developers to identify which page is being requested.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The action fires after the header itself has been loaded, but does not include any wrappers. This gives you as a developer the full width of the screen (not counting the&nbsp;admin&nbsp;menu) to work with.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">&lt;?php
function wporg_example_site_health_tab_content( $tab ) {
    // Do nothing if this is not our tab.
    if ( 'example-site-health-tab' !== $tab ) {
        return;
    }
 
    // Include the interface, kept in a separate file just to differentiate code from views.
    include trailingslashit( plugin_dir_path( __FILE__ ) ) . 'views/site-health-tab.php';
}
add_action( 'site_health_tab_content', 'wporg_example_site_health_tab_content' );</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The above example loads in a file with your tab content from your plugin, but only if the tab matches the tab key (or slug if you will) which was defined in the previous example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is possible to provide output on any tab this way, or on another tab not your own, for example if they interact with each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another example might be to extend the default&nbsp;<code>Info</code>&nbsp;tab, which has the slug&nbsp;<code>debug</code>, and add a button to copy some information specific to only your plugin or theme:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">&lt;?php
function wporg_add_button_to_site_health_info_tab( $tab ) {
    // Do nothing if this is not the "debug" tab.
    if ( 'debug' !== $tab ) {
        return;
    }
    ?&gt;
    &lt;button class="copy-my-plugin-info"&gt;
        &lt;?php esc_html_e( 'Click to copy plugin info', 'text-domain' ); ?&gt;
    &lt;/button&gt;
    &lt;?php
}
add_action( 'site_health_tab_content', 'wporg_add_button_to_site_health_info_tab' );</code></pre>
<!-- /wp:code -->
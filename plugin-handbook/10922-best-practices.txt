https://developer.wordpress.org/plugins/plugin-basics/best-practices/

<!-- wp:paragraph -->
<p>Here are some best practices to help organize your code so it works well alongside WordPress core and other WordPress plugins.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Avoid Naming Collisions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A naming collision happens when your plugin is using the same name for a variable, function or a class as another plugin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Luckily, you can avoid naming collisions by using the methods below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Procedural Coding Method</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By default, all variables, functions and classes are defined in the <strong>global namespace</strong>, which means that it is possible for your plugin to override variables, functions and classes set by another plugin and vice-versa.&nbsp;Variables that are defined <em>inside</em> of functions or classes are not affected by this.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Prefix Everything</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All variables, functions and classes should be prefixed with a unique identifier. Prefixes prevent other plugins from overwriting your variables and accidentally calling your functions and classes. It will also prevent you from doing the same.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Check for Existing Implementations</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PHP provides a number of functions to verify existence of variables, functions, classes and constants. All of these will return true if the entity exists.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Variables</strong>:&nbsp;<a href="http://php.net/manual/en/function.isset.php">isset()</a>&nbsp;(includes arrays, objects, etc.)</li><li><strong>Functions</strong>:&nbsp;<a href="http://php.net/manual/en/function.function-exists.php">function_exists()</a></li><li><strong>Classes</strong>:&nbsp;<a href="http://php.net/manual/en/function.class-exists.php">class_exists()</a></li><li><strong>Constants</strong>:&nbsp;<a href="http://php.net/manual/en/function.defined.php">defined()</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Example</h4>
<!-- /wp:heading -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">// Create a function called "wporg_init" if it doesn't already exist
if ( ! function_exists( 'wporg_init' ) ) {
    function wporg_init() {
        register_setting( 'wporg_settings', 'wporg_option_foo' );
    }
}

// Create a function called "wporg_get_foo" if it doesn't already exist
if ( ! function_exists( 'wporg_get_foo' ) ) {
    function wporg_get_foo() {
        return get_option( 'wporg_option_foo' );
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":3} -->
<h3>Object Oriented Programming Method</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>An easier way to tackle the naming collision problem is to use a <a href="http://php.net/manual/en/language.oop5.php">class</a> for the code of your plugin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will still need to take care of checking whether the name of the class you want is already taken but the rest will be taken care of by PHP.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Example</h4>
<!-- /wp:heading -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">if ( ! class_exists( 'WPOrg_Plugin' ) ) {
    class WPOrg_Plugin {
        public static function init() {
            register_setting( 'wporg_settings', 'wporg_option_foo' );
        }

        public static function get_foo() {
            return get_option( 'wporg_option_foo' );
        }
    }

    WPOrg_Plugin::init();
    WPOrg_Plugin::get_foo();
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading -->
<h2>File Organization</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The root level of your plugin directory should contain your <code>plugin-name.php</code> file and, optionally, your <a href="https://developer.wordpress.org/plugin/the-basics/uninstall-methods/">uninstall.php</a> file. All other files should be organized into sub folders whenever possible.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Folder Structure</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A clear folder structure helps you and others working on your plugin keep similar files together.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a sample folder structure for reference:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">/plugin-name
     plugin-name.php
     uninstall.php
     /languages
     /includes
     /admin
          /js
          /css
          /images
     /public
          /js
          /css
          /images
</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>Plugin Architecture</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The architecture, or code organization, you choose for your plugin will likely depend on the size of your plugin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For small, single-purpose plugins that have limited interaction with WordPress core, themes or other plugins, there’s little benefit in engineering complex classes; unless you know the plugin is going to expand greatly later on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For large plugins with lots of code, start off with classes in mind. Separate style and scripts files, and even build-related files. This will help code organization and long-term maintenance of the plugin.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conditional Loading</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's helpful to separate your admin code from the public code. Use the conditional <a href="https://codex.wordpress.org/Function_Reference/is_admin">is_admin()</a>. You must still perform capability checks as this doesn't indicate the user is authenticated or has Administrator-level access. See <a href="https://developer.wordpress.org/plugins/security/checking-user-capabilities/">Checking User Capabilities</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">if ( is_admin() ) {
    // we are in admin mode
    require_once __DIR__ . '/admin/plugin-name-admin.php';
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":3} -->
<h3>Architecture Patterns</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While there are a number of possible architecture patterns, they can broadly be grouped into three variations:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://github.com/GaryJones/move-floating-social-bar-in-genesis/blob/master/move-floating-social-bar-in-genesis.php" rel="nofollow">Single plugin file, containing functions</a></li><li><a href="https://github.com/norcross/wp-comment-notes/blob/master/wp-comment-notes.php" rel="nofollow">Single plugin file, containing a class, instantiated object and optionally functions</a></li><li><a href="https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate" rel="nofollow">Main plugin file, then one or more class files</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Architecture Patterns Explained</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Specific implementations of the more complex of the above code organizations have already been written up as tutorials and slides:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://jjj.blog/2012/12/slash-architecture-my-approach-to-building-wordpress-plugins/" rel="nofollow">Slash – Singletons, Loaders, Actions, Screens, Handlers</a></li><li><a href="http://iandunn.name/wp-mvc" rel="nofollow">Implementing the MVC Pattern in WordPress Plugins</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Boilerplate Starting Points</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Instead of starting from scratch for each new plugin you write, you may want to start with a <strong>boilerplate</strong>. One&nbsp;advantage of using a boilerplate is to have&nbsp;consistency among your own plugins.&nbsp;Boilerplates also make it easier for other people to contribute to your code if you use a boilerplate they are already familiar with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These also serve as further examples of different yet comparable architectures.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel="nofollow" href="https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate">WordPress Plugin Boilerplate</a>: A foundation for WordPress Plugin Development that aims to provide a clear and consistent guide for building your plugins.</li><li><a rel="nofollow" href="https://github.com/claudiosmweb/wordpress-plugin-boilerplate">WordPress Plugin Bootstrap</a>: Basic bootstrap to develop WordPress plugins using Grunt, Compass, GIT, and SVN.</li><li><a rel="nofollow" href="https://github.com/ptahdunbar/wp-skeleton-plugin">WP Skeleton Plugin</a>: Skeleton plugin that focuses on unit tests and use of composer for development.</li><li><a href="https://developer.wordpress.org/cli/commands/scaffold/plugin/">WP CLI Scaffold</a>: The Scaffold command of WP CLI creates a skeleton plugin with options such as CI configuration files</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Of course, you could take different aspects of these and others to create your own custom boilerplate.</p>
<!-- /wp:paragraph -->
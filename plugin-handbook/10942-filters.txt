https://developer.wordpress.org/plugins/hooks/filters/

<!-- wp:paragraph -->
<p><strong>Filters</strong> are one of the two types of <a href="https://developer.wordpress.org/plugins/hooks/">Hooks</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They provide a way for functions to modify data during the execution of WordPress Core, plugins, and themes.&nbsp;They are the counterpart to <a href="https://developer.wordpress.org/plugins/hooks/actions/">Actions</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlike <a href="https://developer.wordpress.org/plugins/hooks/actions/">Actions</a>, filters are meant to work in an isolated manner, and should never have <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects</a> such as affecting global variables and output. Filters expect to have something returned back to them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Add Filter</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The process of adding a filter includes two steps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, you need to create a Callback function which will be called when the filter is run. Second, you need to add your Callback function to a hook which will perform the calling of the function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will use the add_filter() function, passing at least two parameters: </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>string $hook_name</code> which is the name of the filter youâ€™re hooking to, and </li><li><code>callable $callback</code> the name of your callback function.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The example below will run when the <code>the_title</code> filter is executed.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function wporg_filter_title( $title ) {
	return 'The ' . $title . ' was filtered';
}
add_filter( 'the_title', 'wporg_filter_title' );</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Lets say we have a post title, "Learning WordPress", the above example will modify it to be "The Learning WordPress was filtered".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can refer to the <a href="https://developer.wordpress.org/plugins/hooks/">Hooks</a> chapter for a list of available hooks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you gain more experience, looking through WordPress Core source code will allow you to find the most appropriate hook.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Additional Parameters</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>add_filter() can accept two additional parameters, <code>int $priority</code> for the priority given to the callback function, and <code>int $accepted_args</code> for the number of arguments that will be passed to the callback function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For detailed explanation of these parameters please read the article on <a href="https://developer.wordpress.org/plugins/hooks/actions/">Actions</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Example</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To add a CSS class to the <code>&lt;body&gt;</code> tag when a certain condition is met:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function wporg_css_body_class( $classes ) {
	if ( ! is_admin() ) {
		$classes[] = 'wporg-is-awesome';
	}
	return $classes;
}
add_filter( 'body_class', 'wporg_css_body_class' );</code></pre>
<!-- /wp:code -->
https://developer.wordpress.org/plugins/administration-menus/sub-menus/

<!-- wp:heading -->
<h2>Add a Sub-Menu</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To add a new Sub-menu to WordPress Administration, use the <code>add_submenu_page()</code> function.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">add_submenu_page(
	string $parent_slug,
	string $page_title,
	string $menu_title,
	string $capability,
	string $menu_slug,
	callable $function = ''
);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":3} -->
<h3>Example</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lets say we want to add a Sub-menu "WPOrg Options" to the "Tools" Top-level menu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>The first step</strong> will be creating a function which will output the HTML. In this function we will perform the necessary security checks and render the options we've registered using the <a href="https://developer.wordpress.org/plugins/settings/">Settings API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[info]We recommend wrapping your HTML using a <code>&lt;div&gt;</code> with a class of <code>wrap</code>.[/info]
<!-- /wp:shortcode -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">function wporg_options_page_html() {
	// check user capabilities
	if ( ! current_user_can( 'manage_options' ) ) {
		return;
	}
	?&gt;
	&lt;div class="wrap"&gt;
		&lt;h1&gt;&lt;?php echo esc_html( get_admin_page_title() ); ?&gt;&lt;/h1&gt;
		&lt;form action="options.php" method="post"&gt;
			&lt;?php
			// output security fields for the registered setting "wporg_options"
			settings_fields( 'wporg_options' );
			// output setting sections and their fields
			// (sections are registered for "wporg", each field is registered to a specific section)
			do_settings_sections( 'wporg' );
			// output save settings button
			submit_button( __( 'Save Settings', 'textdomain' ) );
			?&gt;
		&lt;/form&gt;
	&lt;/div&gt;
	&lt;?php
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p><strong>The second step</strong> will be registering our WPOrg Options Sub-menu. The registration needs to occur during the <code>admin_menu</code> action hook.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">function wporg_options_page()
{
	add_submenu_page(
		'tools.php',
		'WPOrg Options',
		'WPOrg Options',
		'manage_options',
		'wporg',
		'wporg_options_page_html'
	);
}
add_action('admin_menu', 'wporg_options_page');</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>For a list of parameters and what each do please see the add_submenu_page() in the reference.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Predefined Sub-Menus</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wouldn't it be nice if we had helper functions that define the <code>$parent_slug</code> for WordPress built-in Top-level menus and save us from manually searching it through the source code?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is a list of parent slugs and their helper functions:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>add_dashboard_page() - <code>index.php</code></li><li>add_posts_page() - <code>edit.php</code></li><li>add_media_page() - <code>upload.php</code></li><li>add_pages_page() - <code>edit.php?post_type=page</code></li><li>add_comments_page() - <code>edit-comments.php</code></li><li>add_theme_page() - <code>themes.php</code></li><li>add_plugins_page() - <code>plugins.php</code></li><li>add_users_page() - <code>users.php</code></li><li>add_management_page() - <code>tools.php</code></li><li>add_options_page() - <code>options-general.php</code></li><li>add_options_page() - <code>settings.php</code></li><li>add_links_page() - <code>link-manager.php</code> - requires a plugin since WP 3.5+</li><li>Custom Post Type - <code>edit.php?post_type=wporg_post_type</code></li><li>Network Admin - <code>settings.php</code></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Remove a Sub-Menu</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The process of removing Sub-menus is exactly the same as <a href="https://developer.wordpress.org/plugins/administration-menus/top-level-menus/#remove-a-top-level-menu">removing Top-level menus</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Submitting forms</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The process of handling form submissions within Sub-menus is exactly the same as <a href="https://developer.wordpress.org/plugins/administration-menus/top-level-menus/#submitting-forms">Submitting forms within Top-Level Menus</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>add_submenu_page()</code> along with all functions for pre-defined sub-menus (<code>add_dashboard_page</code>, <code>add_posts_page</code>, etc.) will return a <code>$hookname</code>, which you can use as the first parameter of <code>add_action</code> in order to handle the submission of forms within custom pages:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">function wporg_options_page() {
	$hookname = add_submenu_page(
		'tools.php',
		'WPOrg Options',
		'WPOrg Options',
		'manage_options',
		'wporg',
		'wporg_options_page_html'
	);

	add_action( 'load-' . $hookname, 'wporg_options_page_html_submit' );
}

add_action('admin_menu', 'wporg_options_page');</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>As always, do not forget to check whether the form is being submitted,  do CSRF verification, <a href="https://developer.wordpress.org/plugins/security/data-validation/">validation</a>, and sanitization.</p>
<!-- /wp:paragraph -->
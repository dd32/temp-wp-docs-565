https://developer.wordpress.org/plugins/users/roles-and-capabilities/

<!-- wp:paragraph -->
<p>Roles and capabilities are two important aspects of WordPress that allow you to control user privileges.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress stores the Roles and their Capabilities in the <code>options</code> table under the <code>user_roles</code> key.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Roles</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A role defines a set of capabilities for a user. For example, what the user may see and do in his dashboard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>By default, WordPress have six roles:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Super Admin</li><li>Administrator</li><li>Editor</li><li>Author</li><li>Contributor</li><li>Subscriber</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>More roles can be added and the default roles can be removed.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":26187} -->
<figure class="wp-block-image"><img src="https://developer.wordpress.org/files/2014/09/wp-roles.png" alt="" class="wp-image-26187" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Adding Roles</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Add new roles and assign capabilities to them with add_role().</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="php" class="language-php">function wporg_simple_role() {
	add_role(
		'simple_role',
		'Simple Role',
		array(
			'read'         =&gt; true,
			'edit_posts'   =&gt; true,
			'upload_files' =&gt; true,
		),
	);
}

// Add the simple_role.
add_action( 'init', 'wporg_simple_role' );</code></pre>
<!-- /wp:code -->

<!-- wp:shortcode -->
[alert]
After the first call to add_role(), the Role and it's Capabilities will be stored in the database!

Sequential calls will do nothing: including altering the capabilities list, which might not be the behavior that you're expecting.
[/alert]
<!-- /wp:shortcode -->

<!-- wp:shortcode -->
[info]
To alter the capabilities list in bulk: remove the role using remove_role() and add it again using add_role() with the new capabilities.

Make sure to do it only if the capabilities differ from what you're expecting (i.e. condition this) or you'll degrade performance considerably!
[/info]
<!-- /wp:shortcode -->

<!-- wp:heading {"level":3} -->
<h3>Removing Roles</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Remove roles with remove_role().</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">function wporg_simple_role_remove() {
	remove_role( 'simple_role' );
}

// Remove the simple_role.
add_action( 'init', 'wporg_simple_role_remove' );</code></pre>
<!-- /wp:code -->

<!-- wp:shortcode -->
[alert]
After the first call to remove_role(), the Role and it's Capabilities will be removed from the database!

Sequential calls will do nothing.
[/alert]
<!-- /wp:shortcode -->

<!-- wp:shortcode -->
[info]
If you're removing the default roles:
<ul>
 	<li>We advise <strong>against</strong> removing the Administrator and Super Admin roles!</li>
 	<li>Make sure to keep the code in your plugin/theme as future WordPress updates may add these roles again.</li>
 	<li>Run
<code>update_option('default_role', YOUR_NEW_DEFAULT_ROLE)</code>
since you'll be deleting <code>subscriber</code> which is WP's default role.</li>
</ul>
[/info]
<!-- /wp:shortcode -->

<!-- wp:heading -->
<h2>Capabilities</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Capabilities define what a <strong>role</strong> can and can not do: edit posts, publish posts, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[info]
Custom post types can require a certain set of Capabilities.
[/info]
<!-- /wp:shortcode -->

<!-- wp:heading {"level":3} -->
<h3>Adding Capabilities</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You may define new capabilities for a role.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use get_role() to get the role object, then use the <code>add_cap()</code> method of that object to add a new capability.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">function wporg_simple_role_caps() {
	// Gets the simple_role role object.
	$role = get_role( 'simple_role' );

	// Add a new capability.
	$role-&gt;add_cap( 'edit_others_posts', true );
}

// Add simple_role capabilities, priority must be after the initial role definition.
add_action( 'init', 'wporg_simple_role_caps', 11 );</code></pre>
<!-- /wp:code -->

<!-- wp:shortcode -->
[info]
It's possible to add custom capabilities to any role.

Under the default WordPress admin, they would have no effect, but they can be used for custom admin screen and front-end areas.
[/info]
<!-- /wp:shortcode -->

<!-- wp:heading {"level":3} -->
<h3>Removing Capabilities</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You may remove capabilities from a role.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The implementation is similar to Adding Capabilities with the difference being the use of <code>remove_cap()</code> method for the role object.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using Roles and Capabilities</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Get Role</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get the role object including all of it's capabilities with get_role().</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">get_role( $role );</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>User Can</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Check if a user have a specified <strong>role</strong> or <strong>capability</strong> with user_can().</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">user_can( $user, $capability );</code></pre>
<!-- /wp:code -->

<!-- wp:shortcode -->
[warning]
There is an undocumented, third argument, $args, that may include the object against which the test should be performed.

E.g. Pass a post ID to test for the capability of that specific post.
[/warning]
<!-- /wp:shortcode -->

<!-- wp:heading {"level":3} -->
<h3>Current User Can</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>current_user_can() is a wrapper function for user_can() using the current user object as the <code>$user</code> parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use this in scenarios where back-end and front-end areas should require a certain level of privileges to access and/or modify.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">current_user_can( $capability );</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Example</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's a practical example of adding an Edit link on the in a template file if the user has the proper capability:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">if ( current_user_can( 'edit_posts' ) ) {
	edit_post_link( esc_html__( 'Edit', 'wporg' ), '&lt;p&gt;', '&lt;/p&gt;' );
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Multisite</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The current_user_can_for_blog() function is used to test if the current user has a certain <strong>role</strong> or <strong>capability</strong> on a specific blog.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"language":"php"} -->
<pre class="wp-block-code"><code lang="php" class="language-php">current_user_can_for_blog( $blog_id, $capability );</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Reference</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Codex Reference for <a href="https://wordpress.org/support/article/roles-and-capabilities/" target="_blank" rel="noopener noreferrer">User Roles and Capabilities</a>.</p>
<!-- /wp:paragraph -->
https://developer.wordpress.org/plugins/internationalization/security/

<!-- wp:paragraph -->
<p>Security is often overlooked when talking about internationalization, but there are a few important things to keep in mind.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Check for Spam and Other Malicious Strings</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When a translator submits a localization to you, always check to make sure they didn’t include spam or other malicious words in their translation. You can use <a href="https://translate.google.com/">Google Translate</a>&nbsp;to translate their translation back into your native language so that you can easily compare the original and translated strings.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Escape Internationalized Strings</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can't trust that a translator will only add benign text to their localization; if they want to, they could add malicious JavaScript or other code instead. To protect against that, it's important to treat internationalized strings like you would any other untrusted input.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you're outputting the strings, then they should be escaped.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="background-color: #dd3d36;padding: 3px;color: white">Insecure:</span></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">_e( 'The REST API content endpoints were added in WordPress 4.7.', 'your-text-domain' ); </pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p><span style="background-color: #7ad03a;padding: 3px">Secure:</span></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">esc_html_e( 'The REST API content endpoints were added in WordPress 4.7.', 'your-text-domain' );</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Alternatively, some people choose to rely on a translation verification mechanism, rather than adding escaping to their code. One example of a verification mechanism is <a href="https://make.wordpress.org/polyglots/handbook/glossary/#project-translation-editor">the editor roles</a> that the WordPress Polyglots team uses for <a href="https://translate.wordpress.org">translate.wordpress.org</a>. This ensures that any translation submitted by an untrusted contributor has been verified by a trusted editor before being accepted.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Use Placeholders for URLs</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Don’t include URLs in internationalized strings,&nbsp;because a malicious translator could change them to point to a different URL. Instead, use placeholders for <a href="http://php.net/manual/en/function.printf.php">printf()</a> or&nbsp;<a href="http://us3.php.net/manual/en/function.sprintf.php">sprintf()</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="background-color: #dd3d36;padding: 3px;color: white">Insecure:</span></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">_e(
	'Please &lt;a href="https://login.wordpress.org/register"&gt; register for a WordPress.org account&lt;/a&gt;.',
	'your-text-domain'
);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p><span style="background-color: #7ad03a;padding: 3px">Secure:</span></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"php"} -->
<pre class="wp-block-syntaxhighlighter-code">printf(
	esc_html__( 'Please %1$s register for a WordPress.org account %2$s.', 'your-text-domain' ),
	'&lt;a href="https://login.wordpress.org/register"&gt;',
	'&lt;/a&gt;'
);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":3} -->
<h3>Compile Your Own .mo Binaries</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Often translators will send the compiled .mo file along with the plaintext .po file, but you should discard their .mo file and compile your own, because&nbsp;you have no way of knowing whether or not it was compiled from the corresponding .po file, or a different one. If it was compiled against a different one, then it could contain spam and other malicious strings without your knowledge.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using PoEdit to generate the binary&nbsp;will override the headers in the .po file, so instead it’s better to&nbsp;compile it from the command line:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">msgfmt -cv -o /path/to/output.mo /path/to/input.po</pre>
<!-- /wp:syntaxhighlighter/code -->